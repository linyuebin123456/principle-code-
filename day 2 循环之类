import numpy as np
number = np.random.randint(1, 100)
count = 0
while True:
    count += 1
    answer = int(input("please input your answer: "))
    if answer < number:
        print("猜的小了")
    elif answer > number:
        print("猜的大了")
    else:
        print("你可真是个小聪明")
        break
print("你一共猜了%d次" % count)
if count>7:
    print("你就是个蠢逼")

上面的代码中使用了break关键字来提前终止循环，需要注意的是break只能终止它所在的那个循环，这一点在使用嵌套的循环结构（下面会讲到）需要引起注意。
除了break之外，还有另一个关键字是continue，它可以用来放弃本次循环后续的代码直接让循环进入下一轮。


计算素数
from math import sqrt
number = int(input("请输入一个数字:"))
end = int(sqrt(number))
is_prime = True
for i in range(2, end+1):
    if number % i == 0:
        is_prime = False
        break
if is_prime and number !=1:
    print('%d是素数' % number)
else:
    print('%d不是素数' % number)





计算纸牌之类
import numpy as np
money = 1000
count = 0
while money > 0:
    print("你现在有:", money)
    needs_go_on = False
    debt = int(input("请输入一定金额的底注:"))
    while True:
        if 0 < debt <= money:
            break
    first_throw = np.random.randint(1, 6) + np.random.randint(1, 6)
    if first_throw == 7 or first_throw == 11:
        print("玩家获胜")
        money = money + debt
    elif first_throw == 2 or first_throw == 3 or first_throw == 12:
        print("庄家获胜")
        money = money - debt
    else:
        needs_go_on = True
    while needs_go_on:
        needs_go_on = False
        current = np.random.randint(1, 6) + np.random.randint(1, 6)
        if current == 7:
            print("庄家获胜")
            money = money - debt
        elif current == first_throw:
            print("玩家获胜")
            money = money + debt
        else:
            needs_go_on = True
    count += 1

print("你现在还剩下了：", money)
print("你一共玩了:", count)



斐波那契数列
def fei(n):
    if n == 1 or n ==2 :
        return 1
    else:
        m = fei(n-1) + fei(n-2)
        return m


list0 = []
try:
    k = int(input("enter: "))
except ValueError:
    print("请输入整数")
temp = 1
while temp <= k:
    list0.append(fei(temp))
    temp += 1
print(list0)





